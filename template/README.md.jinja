{% raw %}[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)
[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)
[![uv](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json)](https://github.com/astral-sh/uv)
[![Checked with pyright](https://microsoft.github.io/pyright/img/pyright_badge.svg)](https://microsoft.github.io/pyright/)
[![Actions status](https://www.github.com/{% endraw %}{{ repo_org_name }}/{{ repo_name }}{% raw %}/actions/workflows/ci.yaml/badge.svg?branch=main)](https://www.github.com/{% endraw %}{{ repo_org_name }}/{{ repo_name }}{% raw %}/actions)
[![Open in Dev Containers](https://img.shields.io/static/v1?label=Dev%20Containers&message=Open&color=blue)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://www.github.com/{% endraw %}{{ repo_org_name }}/{{ repo_name }}{% raw %})


# Usage{% endraw %}{% if manage_github_repos %}{% raw %}
## Managing your company's GitHub Organization
### Repositories
The file `src/aws_central_infrastructure/github_repos/repos.py` contains a list of repositories that are managed by this project. To add a new repository, add a new entry to the `configs` list. You'll also likely want to grant at least one Team some permissions to use this new repository (see section below on Teams).

If you want to allow many people to contribute via `push` access, but still gate Pull Requests with approvals from a smaller subset of people, you can create a CODEOWNERS file within your repository to distinguish which Teams have the ability to approve Pull Requests.

### Teams
The file `src/aws_central_infrastructure/github_repos/teams.py` contains a list of teams that are managed by this project. To add a new team, add a new entry to the `configs` list.
Ensure to assign it appropriate permissions (typically `push`...sometimes referred to as `write` in other contexts) for the repositories it needs access to.
Teams can have a parent, from which they inherit permissions. This is useful for creating a hierarchy of teams.
If an explicit parent is not provided in the configuration, the team will have the root `Everyone` team as its parent.

You can grant a Team permissions for a repository even if that repository was not created using this process.

### External Collaborators
The file `src/aws_central_infrastructure/github_repos/collaborators.py` contains a list of external collaborators that are managed by this project. To add a new collaborator, add a new entry to the `configs` list.
Ensure to assign them appropriate permissions (typically `push`...sometimes referred to as `write` in other contexts) for the repositories they needs access to.

You can grant a Collaborator permissions for a repository even if that repository was not created using this process.

### Initial configuration for Github organization
It's recommended to set the following permissions for the Organization to guide people towards doing more things via this repository instead of the Console.
https://github.com/organizations/{% endraw %}{{ repo_org_name }}{% raw %}/settings/member_privileges

* Base Permissions: Read
* Repository Creation: Neither
* Pages Creation: Neither
* Allow members to create teams: No{% endraw %}{% endif %}{% raw %}

## Allowing a git repository to publish a package to AWS CodeArtifact
The file `src/aws_central_infrastructure/artifact_stores/internal_packages.py` contains a list of repositories that are allowed to publish packages to the AWS CodeArtifact registry. To enable a new repository to do so, add a new entry to the `repo_package_claims` list. This ensures that only one git repo has permission to publish that package, and there's no conflicts of two repos overwriting each other's packages.
At the moment, only Python packages are supported. See https://github.com/LabAutomationAndScreening/copier-aws-central-infrastructure/issues/22 and https://github.com/LabAutomationAndScreening/copier-aws-central-infrastructure/issues/21

## Allowing a git repository to publish a docker image to AWS Elastic Container Registry
The file `src/aws_central_infrastructure/artifact_stores/container_registries.py` contains a list of repositories that are allowed to publish images to an AWS ECR. To create a new ECR that a repository can publish to, add a new entry to the `container_registries` list. This ensures that only one git repo has permission to publish to that ECR, and there's no conflicts of two repos overwriting each other's images.
{% endraw %}{% if manage_okta %}{% raw %}
## Okta

It's recommended to configure Okta initially to use email address as the Okta username.

As a first step of starting to have this repo manage Okta, you'll need to generate an API token for Okta and use the ManualSecretsEntry SSO Permission Set to store it in the created Secret in AWS Secrets Manager in the Central Infrastructure account. At the moment, it's not known what a good least-privilege set of permissions is for the token, nor how to generate a read-only token to use for the Preview token.

### Users
Add users to the `src/aws_central_infrastructure/okta/users.py` file.

### Groups
Groups are managed in the `src/aws_central_infrastructure/okta/groups.py` file. To add a new group, add a new entry to the `configs` list. Users are not directly assigned applications, applications are only assigned to groups. A user can be a member of more than one group.

### Applications
Applications are managed in the `src/aws_central_infrastructure/okta/apps.py` file. To add a new application, add a new entry to the `configs` list. Applications can be assigned to multiple groups.

There is a base-64 encoded stack output of the XML metadata for each application that avoids the need to deal with escaped characters in the standard stack output. This can be decoded using any online tool and then uploaded to SaaS applications.

#### Explicitly supported applications
##### AWS Identity Center
1. In order to obtain the ACS URL and Issuer URL, log in to the Identity Center and click `Change Identity Source` and then `Use External Identity Provider`. Use the `AwsIdentityCenterAppConfig` class and enter those URLs shown in the AWS Console. Then deploy the Okta IaC change.
1. In the AWS Identity Center console, continue the process of changing the identity provider and take the stack output of the metadata XML and upload it.
1. At the moment, there's no known way to automate the setup of SCIM provisioning. You'll need to now click "Enable" for "Automatic Provisioning" in the Identity Center console, and save the URL and API token.
1. In the Okta Admin console, go to the AWS application settings and on the Provisioning tab enable the API endpoint (and enter in the URL and API token you saved from the previous step). Then go down and enable Create/Update/Remove SCIM provisioning for users.

##### Fyle
1. The Fyle team should provide you with the ACS URL and Entity URL. Use the `FyleAppConfig` class and enter those URLs. Then deploy the Okta IaC change.
1. In the Fyle admin console, go to the SSO settings and upload the stack output of the metadata XML.
{% endraw %}{% endif %}{% raw %}

# Development

## Using Pulumi
Run a Pulumi Preview for the IaC Management project:
```bash
uv run python -m aws_central_infrastructure.iac_management.lib.pulumi_deploy --stack=prod
```

Run a Pulumi Preview for the Artifact Stores project:
```bash
uv run python -m aws_central_infrastructure.artifact_stores.lib.pulumi_deploy --stack=prod
```

Run a Pulumi Preview for the Central Networking project:
```bash
uv run python -m aws_central_infrastructure.central_networking.lib.pulumi_deploy --stack=prod
```

Run a Pulumi Preview for the Identity Center project:
```bash
uv run python -m aws_central_infrastructure.identity_center.lib.pulumi_deploy --stack=prod
```{% endraw %}{% if manage_github_repos %}{% raw %}

Run a Pulumi Preview for the GitHub Repositories project:
```bash
uv run python -m aws_central_infrastructure.github_repos.lib.pulumi_deploy --stack=prod
```{% endraw %}{% endif %}{% if manage_okta %}{% raw %}

Run a Pulumi Preview for the Okta project:
```bash
uv run python -m aws_central_infrastructure.okta.lib.pulumi_deploy --stack=prod
```{% endraw %}{% endif %}{% raw %}


## Updating from the template
This repository uses a copier template. To pull in the latest updates from the template, use the command:
`copier update --trust --conflict rej --defaults`{% endraw %}
